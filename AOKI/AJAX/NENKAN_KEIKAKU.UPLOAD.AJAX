#!/usr/bin/bash -vx
#
# NENKAN_KEIKAKU.UPLOAD.AJAX
#
# 年間計画 ファイルアップロード実行 AJAX
#
# 作成者: h-kato@usp-lab.com
# 作成日: 2022/11/15
#
##################################################
# 変数指定
export LANG=ja_JP.UTF-8
export PATH=/home/UTL:/home/TOOL:$PATH

##################################################
# ディレクトリ指定
homd=/home/usp_admin
apld=$homd/APP/KEIYAKU
logd=$homd/LOG
htmd=$apld/HTML
tbld=$homd/TBL
sysd=$homd/SYS
lv1d=$homd/DATA/LV1
lv2d=$homd/DATA/LV2
lv3d=$homd/DATA/LV3
sesd=$homd/SESSION
lv4d=$apld/LV4
comd=$homd/APP/COMMON/HTML
tpld=$apld/TEMPLATE
tmp=/tmp/tmp-$$

today=$(date +%Y%m%d)
todayhms=$(date +%Y%m%d%H%M%S)
##################################################
# 走行ログ
logfile=$logd/LOG.$(basename $0).$(date +%Y%m%d%H%M%S)
exec 2> $logfile

##################################################
# エラーチェック
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
	# エラー表示のhtmlを表示
	echo "Content-type:text/html"
	echo ""
	echo "エラー"
	
	exit 1
}

##################################################
# セッション確認
echo $HTTP_COOKIE                                             |
sed 's/; */\n/g'                                              |
sed -n 's/=/ /p'                                              |
cat                                                           > $tmp-cookie
ERROR_CHECK

session=$(nameread KEY $tmp-cookie)

check_session $session                                        > $tmp-session_check
ERROR_CHECK

# セッションがない場合、ログイン画面へ遷移
if [ ! -s $tmp-session_check ];then
	cat $comd/GOTOURL.HTML                                       |
	calsed "###URL###" "../../COMMON/CGI/LOGIN.CGI"              |
	cat                                                          > $tmp-html
ERROR_CHECK
	
	# HTML表示
	echo "Content-type:text/html"
	echo
	cat $tmp-html
ERROR_CHECK

	rm -rf $tmp-*
	exit 0
fi

# user情報
user=$(selr 1 "user" $sesd/SESSION.$session | self 2)
user_name=$(selr 1 "$user" $lv3d/TBL/USER_USERNAME | self 2)
user_kaisha=$(selr 1 "$user" $lv3d/USER_MASTER/USER_MASTER | self 4)
user_permit=$(selr 1 "$user" $lv3d/USER_MASTER/USER_MASTER | self 5)

##################################################
# ユーザ権限チェック
if [ "$user_permit" == "01" ]; then
	:
else
	echo "Content-type:text/html"
	echo ""
	cat $comd/GOTOURL.HTML                          |
	calsed "###URL###" "../../COMMON/CGI/LOGIN.CGI" |
	cat
	rm -rf $tmp-*
	exit 0
fi


##################################################
# POSTデータ取得
if [ ! -z "$CONTENT_LENGTH" ];then
	dd bs="$CONTENT_LENGTH"                       |
	cat                                           > $tmp-name
ERROR_CHECK
else
	:                                             > $tmp-name
ERROR_CHECK
fi

##################################################
# アップロードファイル取得
mime-read 更新ファイル $tmp-name > $tmp-upload_file
ERROR_CHECK

# 結果ダウンロードファイル名
file_name="NENKAN_KEIKAKU.UPLOAD.RESULT_${todayhms}_$$.xlsx"

# ヘッダー作成
yarr <<FIN > $tmp-header
NO     会社     会計年度 店舗CD 店舗名 
売上高 営業利益
FIN

#  1:会社     2:会計年度     3:店舗CD 4:店舗名 5:売上高
#  6:営業利益 7:(エラー内容)
rex 1 $tmp-upload_file |
# ヘッダー削除
sed -e "1,2d"          |
delf 7                 |
#  1:会社     2:会計年度 3:店舗CD 4:店舗名 5:売上高
#  6:営業利益
juni                   |
#  1:NO     2:会社     3:会計年度 4:店舗CD 5:店舗名
#  6:売上高 7:営業利益
tee $tmp-koshin_data   |
# ヘッダー連結
cat $tmp-header -      |
cat                    > $tmp-tag_data
ERROR_CHECK

# エラーファイルの初期化
:> $tmp-error

if [ -s $tmp-koshin_data ];then
	## 必須項目のチェック
	cat <<-FIN > $tmp-check_need
	会社
	会計年度
	店舗CD
	FIN

	#  1:NO     2:会社     3:会計年度 4:店舗CD 5:店舗名
	#  6:売上高 7:営業利益
	cktag_need $tmp-check_need $tmp-tag_data 2>$tmp-need_error >/dev/null
	if [ $? -ne 0 ]; then
		cat $tmp-need_error          |
		strcat 1 2+\"は必須項目です\" >> $tmp-error
		ERROR_CHECK
	fi

	## 属性チェック
	self 1/NF <<- FIN > $tmp-check_attr
	会計年度 N4
	FIN

	cktag_attr $tmp-check_attr $tmp-tag_data 3>&1 >/dev/null |
	sed 1d                                                   |
	cat                                                      > $tmp-attr_error
	ERROR_CHECK

	if [ -s $tmp-attr_error ]; then
		cat $tmp-attr_error                            |
		strcat 1 \"会計年度は整数４桁を指定してください。\" >> $tmp-error
		ERROR_CHECK
	fi

	## マスタ存在チェック
	# 会社、店舗CDが存在するかチェック
	lineup 2 4 $lv3d/TENPO_MASTER/TENPO_MASTER > $tmp-tenpo_master
	#  1:会社 2:店舗CD
	ERROR_CHECK

	#  1:NO     2:会社     3:会計年度 4:店舗CD 5:店舗名
	#  6:売上高 7:営業利益
  cat $tmp-koshin_data                                    |
	self 2 4 1                                              |
  #  1:会社 2:店舗CD 3:NO
	# 会社名をコード変換
	cjoin2 key=1 <(lineup 2 1 $lv3d/TBL/KAISHA_NAME)        |
	delf 1                                                  |
  msort key=1/2                                           |
  cjoin1 +ng3 key=1/2 $tmp-tenpo_master 3>&1 1>/dev/null  |
  # 会社名を連結
  cjoin2 key=1 $lv3d/TBL/KAISHA_NAME                      |
  delf 1 3                                                |
  #  1:会社名 2:店舗CD 3:NO
  cat                                                     > $tmp-inlist_error
	ERROR_CHECK

	if [ -s $tmp-inlist_error ]; then
		cat $tmp-inlist_error                             |
		strcat 3 \"会社、店舗CDがマスタに存在しません\"  >> $tmp-error
		ERROR_CHECK
	fi

	## 会社、会計年度、店舗コードの重複チェック
	#  1:NO     2:会社     3:会計年度 4:店舗CD 5:店舗名
	#  6:売上高 7:営業利益
	cat $tmp-tag_data               |
	tagself 会社 会計年度 店舗CD NO |
	#  1:会社 2:会計年度 3:店舗CD 4:NO
	# ヘッダー排除
	sed 1d                          |
	msort key=1/3                   |
	yarr num=3                      |
	uawk 'NF!=4'                    |
	yarr -1 num=3                   |
	#  1:会社 2:会計年度 3:店舗CD 4:NO
	cat                             > $tmp-chofuku_error
	ERROR_CHECK
	
	if [ -s $tmp-chofuku_error ];then
		cat $tmp-chofuku_error                  |
		strcat 4 \"会計年度と店舗コードが重複しています\" |
		cat                                    >> $tmp-error
	ERROR_CHECK
	fi
fi

# アップロード結果を作成
if [ -s $tmp-error ];then
        cat $tmp-error                             |
        msort key=1                                |
        yarr -d, num=1                             |
        #  1:No 2:エラー内容
        cjoin2 key=1 - $tmp-koshin_data            |
        #  1:NO     2:エラー内容 3:会社     4:会計年度 5:店舗CD
        #  6:店舗名 7:売上高     8:営業利益
        self 1 3/NF 2
else
        ucat $tmp-koshin_data                      |
        strcat 0 \"_\"
fi                                                 |
#  1:NO     2:会社     3:会計年度   4:店舗CD 5:店舗名
#  6:売上高 7:営業利益 8:エラー内容
tee $tmp-send_data_check                           |
# 正常データのエラー内容を書き換え
fsed 's/_/取込完了/8'                              |
# 会社コードを取得
cjoin2 key=2 <(cat $lv3d/TBL/KAISHA_NAME | lineup 2 1) -  |
#  1:NO     2:会社名 3:会社CD   4:会計年度   5:店舗CD
#  6:店舗名 7:売上高 8:営業利益 9:エラー内容
# 店舗名を連結
self 0 3 5                                         |
cjoin2 key=NF-1/NF $lv3d/TBL/KAISHA_TENPOCO_NAME   |
self 2 4 5 12 7 8 9                                |
#  1:会社     2:会計年度   3:店舗CD 4:店舗名 5:売上高
#  6:営業利益 7:エラー内容
msort key=1/3                                      |
# 数字を文字列認識させるためシングルクオートを追加
strcat -e 1/2 \"\'\"+3 4/NF                        |
# エラーリストをLV4へ保存し、画面よりダウンロード可能にする
wex -s_ $tpld/NENKAN_KEIKAKU.xlsx 年間計画 A3 -    |
cat                                                > $lv4d/$file_name
ERROR_CHECK

## 正常データ登録処理
#  1:NO     2:会社     3:会計年度   4:店舗CD 5:店舗名
#  6:売上高 7:営業利益 8:エラー内容
ucat $tmp-send_data_check                                 |
# 正常データのみ取得
selr 8 "_"                                                |
# 文字列をコード変換
# 会社
cjoin2 key=2 <(cat $lv3d/TBL/KAISHA_NAME | lineup 2 1) -  |
delf 2                                                    |
cat                                                       > $tmp-send_data
ERROR_CHECK

# 登録データが存在する場合
if [ -s $tmp-send_data ];then
	
	# 登録情報の作成
	#  1:NO     2:会社     3:会計年度   4:店舗CD 5:店舗名
	#  6:売上高 7:営業利益 8:エラー内容
	cat $tmp-send_data             |
	strcat 2 3 \"計画\" 5 4        \
	       6 7 \"0\" \"$todayhms\" |
	#  1:会社 2:会計年度 3:区分  4:店舗名   5:店舗コード
	#  6:売上 7:営業利益 8:削除F 9:更新日時
	msort key=1/2@5                |
	cat                            > $tmp-lv1
	ERROR_CHECK
	
	# LV1ディレクトリ作成
	mkdir -p $lv1d/NENKAN_KEIKAKU/"$today"
	ERROR_CHECK
	   
	# LV1へ保存
	mv $tmp-lv1 $lv1d/NENKAN_KEIKAKU/"$today"/NENKAN_KEIKAKU_"$todayhms"_$$
	ERROR_CHECK
	   
	# 整理バッチ
	$sysd/DATAMASTER.NENKAN_KEIKAKU $today 1> /dev/null 2> /dev/null
	ERROR_CHECK
else
	:
fi

##################################################
# 情報送信
echo "Content-type:text/html"
echo
if [ -s $tmp-error ];then
	echo "ng"
else
	echo "ok"
fi
echo -n $file_name

#################################################
# 終了処理
rm -rf $tmp-*
exit 0
