#!/usr/bin/bash -vx
############################################################
#
# CHINRYO_KAITE.CHECK.AJAX
#
# 賃料改定履歴 チェック AJAX
#
# 作成者: t-kaida@usp-lab.com
# 作成日: 2022/10/17
#
############################################################
# 変数指定
export LANG=ja_JP.UTF-8
export PATH=/home/UTL:/home/TOOL:$PATH

############################################################
# ディレクトリ指定
homd=/home/usp_admin
apld=$homd/APP/KEIYAKU
logd=$homd/LOG
htmd=$apld/HTML
lv3d=$homd/DATA/LV3
comd=$homd/APP/COMMON/HTML
tmp=/tmp/tmp-$(basename $0).$(date +'%Y%m%d_%H%M%S').$$

############################################################
# 走行ログ
logfile=$logd/LOG.$(basename $0).$(date +%Y%m%d%H%M%S)
exec 2> $logfile

############################################################
# エラーチェック
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
	# エラー表示のhtmlを表示
	echo "Content-type:text/html"
	echo ""
	echo "エラー"
	
	exit 1
}

############################################################
# POSTデータ取得
if [ ! -z "$CONTENT_LENGTH" ];then
	dd bs="$CONTENT_LENGTH"             |
	cgi-name -n_ -s_                    |
	cat                                 > $tmp-name
ERROR_CHECK
else
	:                                   > $tmp-name
ERROR_CHECK
fi

############################################################
#----------------------------------------
# 入力有無チェックファイル作成
#----------------------------------------
echo "_"          	|
ransu 19            |
yarr                |
cat                 > $tmp-check_file
ERROR_CHECK

#----------------------------------------
# nameファイル整形
#----------------------------------------
# レコードに一つも入力がない場合は排除
cat $tmp-name       																	|
fsed 's/_/ /1'      																	|
uawk 'NF=="3"'      																	|
msort key=1         																	|
#awk '{($1=="削除"&&$3=="false")?$3="_":$3=$3;print}'	|
map num=1           																	|
#delr 1 "削除"       																	|
delr 1 "NO"         																	|
delr 1 "支払方法"   																	|
tateyoko            																	|
delr 1 "999999"     																	|
delr 4 true         																	| # 削除行はチェック対象外
uawk '{$4="_";print}'																	| # 削除行の false を"_"に
cjoin0 +ng key=2/NF $tmp-check_file 2>&1 > /dev/null	|
unmap num=1         |
strcat 2+\"_\"+1 3  |
cat                 > $tmp-check_name
ERROR_CHECK

if [ -s $tmp-check_name ];then
	
	#----------------------------------------
	# エラーファイルの初期化
	#----------------------------------------
	:                   > $tmp-error
	
	#----------------------------------------
	# 必須項目チェック
	#----------------------------------------
	self 1/NF <<- FIN	> $tmp-need
	会社
	店舗コード
	管理番号
	更新日
	消費税区分
	FIN
	
	check_need_name $tmp-need $tmp-check_name	> $tmp-need_error
	if [ $? -ne 0 ];then
	        cat $tmp-need_error               |
	        strcat 1 \"必須項目です\"         |
	        cat                               >> $tmp-error
	ERROR_CHECK
	fi
	
	#----------------------------------------
	# 数値チェック
	#----------------------------------------
	self 1/NF <<- FIN	> $tmp-attr
	賃料        n20
	管理費      n20
	駐車料      n20
	その他      n20
	消費税      n20
	相殺額      n20
	月額支払額  n20
	FIN
	
	# POSTデータよりカンマを排除
	cat $tmp-check_name      	|
	sed 's/,//g'              |
	# チェック処理
	check_attr_name $tmp-attr	- > $tmp-attr_error
	
	if [ $? -ne 0 ];then
	        cat $tmp-attr_error                	|
	        strcat 1 \"整数を入力してください\"	|
	        cat                                 >> $tmp-error
	ERROR_CHECK
	fi
	
	#----------------------------------------
	# 日付チェック
	#----------------------------------------
	self 1/NF <<- FIN	> $tmp-date
	更新日   D
	FIN
	
	## POSTデータより日付をyyyy/mm/dd → yyyymmdd へ変換
	cat $tmp-check_name				|
	fsed 's./..2'       			|
	# チェック処理
	check_date_name $tmp-date	> $tmp-date_error
	
	if [ $? -ne "0" ];then
	        cat $tmp-date_error                 	|
	        strcat 1 \"日付形式に誤りがあります\"	|
	        cat                                   >> $tmp-error
	ERROR_CHECK
	fi
	
	#----------------------------------------
	# マスタ存在チェック
	#----------------------------------------
	self 1/NF <<- FIN	> $tmp-inlist
	会社
	FIN
	
	check_inlist_name $tmp-inlist $tmp-check_name			> $tmp-inlist_error
	if [ $? -ne 0 ];then
	        cat $tmp-inlist_error                 		|
	        strcat \"会社_\"+1 \"会社が存在しません\" |
	        cat                                   		>> $tmp-error
	ERROR_CHECK
	fi
	
	#----------------------------------------
	# 店舗コードの存在チェック
	#----------------------------------------
	cat $tmp-check_name                                               |
	nameread -le '会社|店舗コード'                                    |
	#  1:name 2:value
	fsed 's/_/ /1'                                                    |
	self 2 3                                                          |
	#  1:NO 2:value
	# フィールド形式へ変更
	yarr num=1                                                        |
	#  1:NO 2:会社コード 3:店舗コード
	cjoin1 +ng2 key=2/3 $lv3d/TBL/KAISHA_TENPOCO_NAME 2>&1 >/dev/null	|
	strcat \"店舗コード_\"+1 \"店舗コードが存在しません\"     			  |
	cat                                                               >> $tmp-error
	ERROR_CHECK
	
	#----------------------------------------
	# 管理番号の存在チェック
	#----------------------------------------
	cat $tmp-check_name                                               			|
	nameread -le '会社|店舗コード|管理番号'                           			|
	#  1:name 2:value
	fsed 's/_/ /1'                                                    			|
	self 2 3                                                          			|
	#  1:NO 2:value
	# フィールド形式へ変更
	yarr num=1                                                        			|
	#  1:NO 2:会社コード 3:店舗コード 4:管理番号
	cjoin1 +ng2 key=2/4 $lv3d/TBL/KAISHA_KEIYAKUBANGO_NAME 2>&1 >/dev/null	|
	strcat \"管理番号_\"+1 \"管理番号が存在しません\"     			  					|
	cat                                                               			>> $tmp-error
	ERROR_CHECK
	
	#----------------------------------------
	# キー項目の重複チェック
	#----------------------------------------
	cat $tmp-check_name                                              	|
	nameread -le '会社|店舗コード|管理番号|更新日|回数'          			|
	#  1:name 2:value
	fsed 's/_/ /1'                                                    |
	self 2 3                                                          |
	#  1:NO 2:value
	yarr num=1                                                        | # フィールド形式へ変更
	selr 3 _																													| # 追加データのみ重複チェックの対象とする
	self 1 2 4 6 5 																										|	
	fsed 's./..5'																											|
	#  1:NO 2:会社コード 3:店舗コード 4:管理番号 5:更新日
	
	cjoin1 key=2/5 <(cat $lv3d/CHINRYOKAITE/CHINRYOKAITE | msort key=1/4) - | # 重複チェック
	strcat \"更新日_\"+1 \"更新日が重複しています\"                 	|
	cat                                                            		>> $tmp-error
	ERROR_CHECK
fi

#----------------------------------------
# 送信ファイルの作成
#----------------------------------------
if [ -s $tmp-error ];then
  cat $tmp-error  	|
  fsed 's/_/ /1'  	|
  #  1:項目 2:No 3:エラー内容
  lineup 2        	|
  #  1:No
  yarr            	|
  tr " " ","      	|
  cat - $tmp-error  |
  cat               > $tmp-ajax
	ERROR_CHECK
else
  echo -n "ok"      > $tmp-ajax
	ERROR_CHECK
fi

##################################################
# 情報送信
echo "Content-type:text/html"
echo
cat $tmp-ajax

#################################################
# 終了処理
rm -rf $tmp-*
exit 0

